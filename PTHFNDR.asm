STACK SEGMENT PARA STACK
	DB 64 DUP (' ')
STACK ENDS

DATA SEGMENT PARA 'DATA'
	PLAYER_POS_X DB 00H
	PLAYER_POS_Y DB 00H
	GRID_SIZE DB 08H
	GRID_VALUES DB 100H DUP('x')
	PATH_POS_X DB 00H
	PATH_POS_Y DB 00H
	PREV_DL DB 00H
	WELCOME_STRING DB "PATH FINDER$"
	CHOICE_STRING DB "1.EASY 2.MEDIUM 3.HARD$"
	YOU_WIN DB "YOU WIN$"
DATA ENDS


CODE SEGMENT PARA 'CODE'
	TERMINATE MACRO
		MOV AH, 4CH
		MOV AL, 00H
		INT 21H
	ENDM
	
	MAIN PROC FAR
	PUSH DS
	XOR AX, AX
	PUSH AX
	MOV AX, DATA 
	MOV DS, AX
	POP AX
	POP AX
	
	ASSUME CS:CODE, DS:DATA, SS:STACK
		;CALL GAME
		CALL CLEAR_SCREEN
		MOV DH, 20;ROW
		MOV DL, 20 ;COL
		INT 10H
		
		MOV AH, 09H
		LEA DX, WELCOME_STRING
		INT 21H
		BEG:
		MOV AH, 02H ;WRITE A CHARACTER TO STANDARD OUTPUT
		MOV DL, 0AH
		INT 21H
		
		MOV AH, 09H
		LEA DX, CHOICE_STRING
		INT 21H
		
		MOV AH, 07h
		MOV DL, 0FFH
		INT 21H
		
		MENU:
		;INPUT IS w 
		CMP AL, '1'
		JE EASY

		;INPUT IS w 
		CMP AL, '2'
		JE MED
		
		;INPUT IS w 
		CMP AL, '3'
		JE HARD
		
		CMP AL, 'e'
		JE CLOSE
		CMP AL, 'E'
		JE CLOSE
		
		JMP BEG
		
		CLOSE:
		TERMINATE
		
		EASY:
		MOV GRID_SIZE, 04H
		JMP START
		
		MED:
		MOV GRID_SIZE, 08H
		JMP START
		
		HARD:
		MOV GRID_SIZE, 10H
		
		START:
		CALL GAME 
		JMP MENU
	RET
	MAIN ENDP
	
	
	GAME PROC NEAR
		MOV AL, GRID_SIZE 
		DEC AL
		MOV PLAYER_POS_X, AL
		MOV PLAYER_POS_Y, AL		
		MOV PATH_POS_X, 00H
		MOV PATH_POS_Y, 00H
		
		CALL CLEAR_SCREEN
		
		CALL DRAW_GRID
		CALL CREATE_PATH
		CALL DRAW_PLAYER
		;CALL DRAW_PATH
		BACK:
		CALL MOVE_PLAYER
		CALL DRAW_PLAYER
		CMP PLAYER_POS_X, 00H
		JNE BACK
		CMP PLAYER_POS_Y, 00H
		JNE BACK
		
		MOV AH, 09H
		LEA DX, YOU_WIN
		INT 21H
		
		MOV AH, 07h
		MOV DL, 0FFH
		INT 21H
		CALL CLEAR_SCREEN
		
	RET
	GAME ENDP
	
	
	CLEAR_SCREEN PROC NEAR
		MOV AH, 00H
		MOV AL, 13H ;SET VIDEO MODE
		INT 10H
		
		MOV AH, 0BH ;SET BACKGROUND COLOR
		MOV BH, 01H
		MOV BL, 00H ;background color
		INT 10H
	RET 
	CLEAR_SCREEN ENDP
	
	
	DRAW_POINT PROC NEAR
		MOV AH, 02H ;WRITE A CHARACTER TO STANDARD OUTPUT
		MOV DL, '.'
		INT 21H
	RET
	DRAW_POINT ENDP
	
	DRAW_PLAYER PROC NEAR
		MOV AH, 02H ;WRITE TO CHARACTER TO STANDARD OUTPUT
		MOV BH, 00H ;page number 
		
		;set cursor position
		MOV DL, PLAYER_POS_X ;COL
		MOV DH, PLAYER_POS_Y ;ROW
		INT 10H
		
		MOV DL, '*'
		INT 21H
	RET
	DRAW_PLAYER ENDP
	
	DRAW_GRID PROC NEAR
		MOV CX, 0000H
		MOV AH, 02H 
		MOV BH, 00H ;page number 
		
		DRAW_ROW:
		;set cursor position
		MOV DH, CH ;ROW
		MOV DL, CL ;COL
		INT 10H
		CALL DRAW_POINT
		INC CL
		CMP CL, GRID_SIZE
		JNGE DRAW_ROW
		INC CH
		MOV CL, 00H
		CMP CH, GRID_SIZE
		JNGE DRAW_ROW
	RET 
	DRAW_GRID ENDP
	
	
	GET_PLAYER_INDEX PROC NEAR
		XOR AX, AX
		MOV AL, GRID_SIZE
		MOV BL, PLAYER_POS_Y
		MUL BL
		ADD AL, PLAYER_POS_X
		ADD AX, SI
		MOV BX, AX
	RET
	GET_PLAYER_INDEX ENDP
	
	MOVE_PLAYER PROC NEAR		
		MOV AH, 07h
		MOV DL, 0FFH
		INT 21H
		;input is present in AL
		
		;INPUT IS w 
		CMP AL, 'w'
		JE MOVE_UP
		CMP AL, 'W'
		JE MOVE_UP
		
		;INPUT IS a 
		CMP AL, 'a'
		JE MOVE_LEFT
		CMP AL, 'A'
		JE MOVE_LEFT

		;INPUT IS s
		CMP AL, 's'
		JE MOVE_DOWN
		CMP AL, 'S'
		JE MOVE_DOWN
		
		;INPUT IS d 
		CMP AL, 'd'
		JE MOVE_RIGHT
		CMP AL, 'D'
		JE MOVE_RIGHT
		
		;INPUT IS E 
		CMP AL, 'P'
		JE PATH
		CMP AL, 'p'
		JE PATH
		
		
		;INPUT IS E 
		CMP AL, 'e'
		JE EXIT
		CMP AL, 'E'
		JE EXIT
		RET
		
		PATH:
		CALL DRAW_PATH
		RET
		
		MOVE_UP:
		CALL ERASE_PLAYER
		DEC PLAYER_POS_Y
		CMP PLAYER_POS_Y, 00H
		JL RESET
		CALL GET_PLAYER_INDEX
		CMP BYTE PTR[BX], '.'
		JNE RESET
		RET
		
		MOVE_DOWN:
		CALL ERASE_PLAYER
		INC PLAYER_POS_Y
		MOV AL, PLAYER_POS_Y
		CMP AL, GRID_SIZE
		JGE RESET
		CALL GET_PLAYER_INDEX
		CMP BYTE PTR[BX], '.'
		JNE RESET
		RET
		
		MOVE_LEFT:
		CALL ERASE_PLAYER
		DEC PLAYER_POS_X
		CMP PLAYER_POS_X, 00H
		JL RESET
		CALL GET_PLAYER_INDEX
		CMP BYTE PTR[BX], '.'
		JNE RESET
		RET
		
		MOVE_RIGHT:
		CALL ERASE_PLAYER
		INC PLAYER_POS_X
		MOV AL, PLAYER_POS_X
		CMP AL, GRID_SIZE
		JGE RESET
		CALL GET_PLAYER_INDEX
		CMP BYTE PTR[BX], '.'
		JNE RESET
		RET
		
		RESET:
		MOV AL, GRID_SIZE
		DEC AL
		MOV PLAYER_POS_X, AL
		MOV PLAYER_POS_Y, AL
		
		RET
		
		EXIT:
		CALL CLEAR_SCREEN
		TERMINATE
	RET 
	MOVE_PLAYER ENDP
	
	
	ERASE_PLAYER PROC NEAR
		;ERASE CURRENT PLAYER POS 
		MOV AH, 02H ;WRITE TO CHARACTER TO STANDARD OUTPUT
		MOV BH, 00H ;page number 
		;set cursor position
		MOV DL, PLAYER_POS_X ;COL
		MOV DH, PLAYER_POS_Y ;ROW
		INT 10H
		CALL DRAW_POINT
		RET
	RET
	ERASE_PLAYER ENDP
	
	CREATE_PATH PROC NEAR
		LEA SI, GRID_VALUES
		MOV BYTE PTR[SI], '.'
		
		MOV AH, 2CH;GET SYSTEM TIME
		INT 21H
		;CH = hour(0 to 23)
		;CL = minute (0 to 59)
		;DH = second (0 to 59)
		;DL = centiseconds (0 to 99)
		
		NEXT_GRID:
		MOV AL, GRID_SIZE
		DEC AL
		CMP PATH_POS_X, AL	
		JGE NEXT_PATH_Y
		
		MOV AL, GRID_SIZE
		DEC AL
		CMP PATH_POS_Y, AL
		JGE NEXT_PATH_X
		
		
		ROR CX, 1
		MOV DX, CX
		AND DX, 0001H
		JZ RIGHT
		JMP BELOW
		
		RIGHT:
		INC PATH_POS_X
		JMP UPDATE_ARR
		
		BELOW:
		INC PATH_POS_Y
		
		UPDATE_ARR:
		XOR AX, AX
		MOV AL, GRID_SIZE
		MOV BL, PATH_POS_Y
		MUL BL
		ADD AL, PATH_POS_X
		ADD AX, SI
		MOV BX, AX
		MOV BYTE PTR[BX], '.'
		JMP NEXT_GRID
				
		NEXT_PATH_X:
		INC PATH_POS_X
		XOR AX, AX
		MOV AL, GRID_SIZE
		MOV BL, PATH_POS_Y
		MUL BL
		ADD AL, PATH_POS_X
		ADD AX, SI
		MOV BX, AX
		MOV BYTE PTR[BX], '.'
		MOV AL, GRID_SIZE
		DEC AL
		CMP PATH_POS_X, AL
		JL NEXT_PATH_X
		RET
		

		NEXT_PATH_Y:
		INC PATH_POS_Y
		XOR AX, AX
		MOV AL, GRID_SIZE
		MOV BL, PATH_POS_Y
		MUL BL
		ADD AL, PATH_POS_X
		ADD AX, SI
		MOV BX, AX
		MOV BYTE PTR[BX], '.'
		MOV AL, GRID_SIZE
		DEC AL
		CMP PATH_POS_Y, AL
		JL NEXT_PATH_Y
		RET
	CREATE_PATH ENDP
	
	DRAW_PATH PROC NEAR
		MOV PATH_POS_X, 00H
		MOV PATH_POS_Y, 00H		
		LEA SI, GRID_VALUES
		
		
		ROW:
		;set cursor position
		MOV DL, PATH_POS_X ;COL
		MOV DH, PATH_POS_Y ;ROW
		INT 10H
		
		XOR AX, AX
		MOV AL, GRID_SIZE
		MOV BL, PATH_POS_Y
		MUL BL
		ADD AL, PATH_POS_X
		ADD AX, SI
		MOV BX, AX
		MOV DL, BYTE PTR[BX];GET CHARACTER FROM  GRID_VALUES INTO DL
		
		MOV AH, 02H ;WRITE TO CHARACTER TO STANDARD OUTPUT
		MOV BH, 00H ;page number 
		INT 21H
		
		INC PATH_POS_X
		MOV AL, PATH_POS_X
		CMP AL, GRID_SIZE
		JL ROW
		
		MOV PATH_POS_X, 00H
		INC PATH_POS_Y
		MOV AL, PATH_POS_Y 
		CMP AL, GRID_SIZE
		JL ROW
		
	RET
	DRAW_PATH ENDP
	
	CLEAR_VALUES PROC NEAR
	MOV CX, 100H
	LEA SI, GRID_VALUES
	HERE:
	MOV BYTE PTR[SI], 'x'
	INC SI
	LOOP HERE
	RET 
	CLEAR_VALUES ENDP
	
CODE ENDS
END